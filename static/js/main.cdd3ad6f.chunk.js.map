{"version":3,"sources":["pages/LandingPage.js","pages/sort_components/sortingAlgorithms.js","pages/SortingPage.js","pages/data_structures/PriorityQueue.js","pages/data_structures/Queue.js","pages/graph_components/graphAlgorithms.js","pages/graph_components/mazeAlgorithms.js","pages/graph_components/Node.js","pages/graph_components/tutorial/tutorial_page_1.gif","pages/graph_components/tutorial/tutorial_page_2.gif","pages/graph_components/tutorial/tutorial_page_3.gif","pages/graph_components/tutorial/tutorial_page_4.gif","pages/GraphPage.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","history","useHistory","_jsxs","className","children","onClick","push","_jsx","src","process","window","location","href","class","quickSortAnimation","array","slice","animations","quickSort","arr","start","end","index","partition","pivotValue","pivotIndex","i","length","DEFAULT_COLOR","SortingPage","prevTimeout","setPrevTimeout","useState","timeComplexity","setTimeComplexity","algo","best","avg","worst","numberOfBars","setNumberOfBars","speed","setSpeed","clearAllTimeouts","highestTimeoutId","setTimeout","clearTimeout","randomArray","num","arguments","undefined","step","j","Math","floor","random","temp","resetColors","document","getElementsByClassName","forEach","bar","style","backgroundColor","setArr","resetArray","offsetDelay","height","animate","opacity","offset","duration","iterations","useEffect","delay","pow","arrayBars","Array","from","color","id","barStyle","Link","to","map","value","shellSort","n","gap","shellSortAnimation","bubbleSort","bubbleSortAnimation","mergeSort","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","doMerge","k","mergeSortAnimation","insertionSort","insertionSortAnimation","type","min","max","defaultValue","onMouseDown","onChange","e","target","scope","PriorityQueue","constructor","comparator","a","b","this","_heap","_comparator","top","parent","left","right","size","isEmpty","peek","_len","values","_key","_siftUp","pop","poppedValue","bottom","_swap","_siftDown","replace","replacedValue","_greater","node","maxChild","Queue","_queue","_offset","getLength","enqueue","item","dequeue","dijkstra","grid","startNode","endNode","visitedNodesInOrder","pq","dv","currentNode","known","neighbors","row","col","neighbor","neighborType","ref","weight","startsWith","parseInt","split","pv","shift","aStar","open","closed","f","g","h","sort","includes","x1","y1","x2","y2","dx","abs","dy","hTemp","hypot","aStarManhattan","aStarDiagonal","aStarEuclidean","breadthFirstSearch","queue","depthFirstSearch","stack","randEven","x","randOdd","rand","val","in_min","in_max","out_min","out_max","recursiveDivision","walls","division","isHorizontal","wallIdx","pathIdx","randomMaze","randomWeightedMaze","prims","minSpanTree","tmp","curRow","frontier","startRow","startCol","randIdx","splice","coord","dfsMaze","dfsTree","binaryTreeMaze","bst","connections","connection","SimplexNoise","require","terrainMap","weights","simplex","noise2D","clip","fileReaderTerrain","reader","Promise","resolve","reject","onload","event","imgElement","createElement","result","canvas","width","ctx","getContext","drawImage","pixels","getImageData","data","greyscaleWeights","lightness","round","idx","Node","forwardRef","props","endRow","nodeSize","mouseButton","endCol","selectedNode","startCoveredOverNode","endCoveredOverNode","currentAlgorithm","placeableNode","animationSpeed","pxToNode","px","parseFloat","getComputedStyle","documentElement","fontSize","GraphPage","useRef","current","gridRef","dimensions","setDimensions","exampleWeightRef","webCamRef","webcamEnabled","setWebcamState","tutorialPage","setTutorialPage","requestAnimationFrame","resetGrid","resizeGrid","addEventListener","handleMouseDown","handleMouseMove","handleMouseUp","preventDefault","removeEventListener","button","parentNode","name","runAlgorithm","animateElement","prevNode","transform","algorithmFunction","noDelay","clearVisualization","nodesInShortestPathOrder","finishNode","unshift","getNodesInShortestPathOrder","childNodes","rows","cols","iterPerTimeout","ceil","overlay","borderRadius","pathDelay","generateMaze","mazeFunction","wallsPerIteration","resetNode","async","offsetHeight","offsetWidth","element","time","animation","Infinity","file","files","FileReader","readAsDataURL","readImageInput","then","catch","err","console","log","accept","e1","r","currentRow","elementRow","e2","c","tabIndex","Webcam","screenshotFormat","audio","readWebcam","screenshot","getScreenshot","blob","dataurl","mime","match","bstr","atob","u8arr","Uint8Array","charCodeAt","Blob","dataURLtoBlob","tutorialGif1","alt","tutorialGif2","tutorialGif3","tutorialGif4","App","Router","Switch","Route","exact","path","component","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cdd3ad6f.chunk.js","sourcesContent":["import \"./LandingPage.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const LandingPage = () => {\r\n\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <div className=\"landingPage d-flex flex-column pt-5\">\r\n        <div className=\"w-100 flex-grow-1 d-flex justify-content-around align-items-center flex-wrap gap-4 m-auto\">\r\n          <div onClick={() =>  history.push('/sorting')} className=\"algo\">\r\n            <h2 className=\"mb-4\">Sorting Algorithms</h2>\r\n            <img src={process.env.PUBLIC_URL + \"/sorting_example.PNG\"} />\r\n          </div>\r\n\r\n          <div onClick={() =>  history.push('/graph')} className=\"algo\">\r\n            <h2 className=\"mb-4\">Graphing Algorithms</h2>\r\n            <img src={process.env.PUBLIC_URL + \"/graph_example.PNG\"} />\r\n          </div>\r\n        </div>\r\n        <div className=\"mb-2 ms-2\">\r\n          <div \r\n            className=\"github-link d-inline-block\" \r\n            onClick={() => {window.location.href=\"https://github.com/seashoo/SortSite\"}}\r\n          > \r\n            <i class=\"fab fa-3x fa-github\"></i>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n","\r\nexport const bubbleSortAnimation = (array) => {\r\n    array = array.slice();\r\n\r\n    const animations = [];\r\n    const n = array.length\r\n    let i, j;\r\n\r\n    // n-1 runs of bubble sort\r\n    for (i = 0; i < n-1; i++) {\r\n        // runs 1 less from the end each time\r\n        for (j = 0; j < n-i-1; j++) {\r\n            if (array[j] > array[j+1]) {\r\n                // Swap array[j] and array[j+1]\r\n                [array[j],  array[j+1]] = [ array[j+1], array[j]];\r\n                animations.push([\r\n                    ['swap', j, array[j]], \r\n                    ['swap', j+1, array[j+1]]\r\n                ]);\r\n                animations.push([\r\n                    ['clear', j, array[j]], \r\n                    ['clear', j+1, array[j+1]]\r\n                ]);\r\n            }\r\n            if (j+1 === n-i-1) {\r\n                animations.push([\r\n                    ['sorted', j+1, array[j+1]], \r\n                ]);\r\n            }\r\n        }\r\n    }\r\n    animations.push([\r\n        ['sorted', 0, array[0]], \r\n    ]);\r\n\r\n    return animations;\r\n}\r\n\r\nexport const insertionSortAnimation = (array) => {\r\n    array = array.slice();\r\n\r\n    const animations = [];\r\n    let i, j;\r\n\r\n    animations.push([\r\n        ['sorted', 0, array[0]]\r\n    ]);\r\n \r\n    for (i = 1; i < array.length; i++) {\r\n        j = i;\r\n        // Insert array[i] into list 0..i-1\r\n        while (j >= 0 && array[j] < array[j-1]) {\r\n            // Swap array[j] and array[j-1]\r\n            [array[j],  array[j-1]] = [ array[j-1], array[j]];\r\n            // Add swapping to animation\r\n            animations.push([\r\n                ['swap', j, array[j]], \r\n                ['swap', j-1, array[j-1]]\r\n            ]);\r\n            animations.push([\r\n                ['sorted', j, array[j]], \r\n                ['sorted', j-1, array[j-1]]\r\n            ]);\r\n            // Decrement j by 1\r\n            j -= 1;\r\n        }\r\n        // Add end of iteration to animation\r\n        animations.push([ \r\n            ['sorted', j, array[j]]\r\n        ]);\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport const quickSortAnimation = (array) => {\r\n    array = array.slice();\r\n\r\n    const animations = [];\r\n\r\n    const partition = (arr, start, end) => {\r\n        // Taking the last element as the pivot\r\n        let pivotValue = arr[end];\r\n        let pivotIndex = start; \r\n        for (let i = start; i < end; i++) {\r\n            if (arr[i] < pivotValue) {\r\n                // Swapping elements\r\n                [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n                animations.push([\r\n                    ['swap', i, array[i]],\r\n                    ['swap', pivotIndex, array[pivotIndex]]\r\n                ]);\r\n                animations.push([\r\n                    ['clear', i, array[i]],\r\n                    ['clear', pivotIndex, array[pivotIndex]]\r\n                ]);\r\n                // Moving to next element\r\n                pivotIndex++;\r\n            }\r\n        }\r\n        \r\n        // Putting the pivot value in the middle\r\n        [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] \r\n        animations.push([\r\n            ['swap', end, array[end]],\r\n            ['swap', pivotIndex, array[pivotIndex]]\r\n        ]);\r\n        animations.push([\r\n            ['clear', end, array[end]],\r\n            ['clear', pivotIndex, array[pivotIndex]]\r\n        ]);\r\n\r\n        return pivotIndex;\r\n    };\r\n\r\n    const quickSort = (arr, start, end) => {\r\n        // Base case or terminating case\r\n        if (start > end) {\r\n            return;\r\n        }\r\n        \r\n        // Returns pivotIndex\r\n        const index = partition(arr, start, end);\r\n\r\n        animations.push([\r\n            ['sorted', index, array[index]],\r\n        ]);\r\n        \r\n        // Recursively apply the same logic to the left and right subarrays\r\n        quickSort(arr, start, index - 1);\r\n        quickSort(arr, index + 1, end);\r\n    }\r\n\r\n    quickSort(array, 0, array.length -1)\r\n\r\n    return animations;\r\n}\r\n\r\nexport const shellSortAnimation = (array) => {\r\n    const animations = [];\r\n\r\n    array = array.slice();\r\n\r\n    let n = array.length;\r\n    \r\n    // Start with a big gap, then reduce the gap\r\n    for (let gap = Math.floor(n/2); gap > 0; gap = Math.floor(gap/2))\r\n    {\r\n        // Do a gapped insertion sort for this gap size.\r\n        // The first gap elements a[0..gap-1] are already\r\n        // in gapped order keep adding one more element\r\n        // until the entire array is gap sorted\r\n        for (let i = gap; i < n; i += 1)\r\n        {\r\n            // add a[i] to the elements that have been gap\r\n            // sorted save a[i] in temp and make a hole at\r\n            // position i\r\n            let temp = array[i];\r\n            // shift earlier gap-sorted elements up until\r\n            // the correct location for a[i] is found\r\n            let j;\r\n            for (j = i; j >= gap && array[j - gap] > temp; j -= gap) {\r\n                array[j] = array[j - gap];\r\n                animations.push([\r\n                    ['swap', j, array[j]],\r\n                    ['swap', j-gap, array[j-gap]]\r\n                ]);\r\n\r\n                if (gap === 1) { \r\n                    animations.push([\r\n                        ['sorted', j, array[j]],\r\n                        ['sorted', j-gap, array[j-gap]]\r\n                    ]);\r\n                }\r\n                else {\r\n                    animations.push([\r\n                        ['clear', j, array[j]],\r\n                        ['clear', j-gap, array[j-gap]]\r\n                    ]);\r\n                }\r\n            }\r\n            // put temp (the original a[i]) in its correct\r\n            // location\r\n            array[j] = temp;\r\n            if (gap === 1) {\r\n                animations.push([\r\n                    ['sorted', j, temp]\r\n                ]);\r\n            }\r\n            else {\r\n                animations.push([\r\n                    ['clear', j, temp]\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n// Credit to Clément Mihailescu for Merge Sort Implementation\r\nexport const mergeSortAnimation = (array) => {\r\n\r\n    const mergeSortHelper = (mainArray, startIdx, endIdx, auxiliaryArray, animations, ) => {\r\n      if (startIdx === endIdx) return;\r\n      const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n      mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n      mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n      doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n    }\r\n\r\n    const doMerge = (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations,) => {\r\n      let k = startIdx;\r\n      let i = startIdx;\r\n      let j = middleIdx + 1;\r\n      while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n    \r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n          // We overwrite the value at index k in the original array with the\r\n          // value at index i in the auxiliary array.\r\n          mainArray[k] = auxiliaryArray[i];\r\n\r\n          animations.push([\r\n            ['swap', k, mainArray[k]],\r\n            ['swap', i, -1]\r\n          ]);\r\n          animations.push([\r\n            ['sorted', k, -1],\r\n            ['sorted', i, -1]\r\n          ]);\r\n\r\n          k++;\r\n          i++;\r\n        } else {\r\n          // We overwrite the value at index k in the original array with the\r\n          // value at index j in the auxiliary array.\r\n          \r\n          mainArray[k] = auxiliaryArray[j];\r\n\r\n          animations.push([\r\n            ['swap', k, mainArray[k]],\r\n            ['swap', j, -1]\r\n          ]);\r\n          animations.push([\r\n            ['sorted', k, -1],\r\n            ['sorted', j, -1]\r\n          ]);\r\n\r\n          k++;\r\n          j++;\r\n        }\r\n      }\r\n      while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        \r\n        mainArray[k] = auxiliaryArray[i];\r\n\r\n        animations.push([\r\n            ['swap', k, mainArray[k]],\r\n            ['swap', i, -1]\r\n        ]);\r\n        animations.push([\r\n            ['sorted', k, -1],\r\n            ['sorted', i, -1]\r\n        ]);\r\n        k++;\r\n        i++;\r\n      }\r\n      while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        mainArray[k] = auxiliaryArray[j];\r\n\r\n        animations.push([\r\n            ['swap', k, mainArray[k]],\r\n            ['swap', j, -1],\r\n        ]);\r\n        animations.push([\r\n            ['sorted', k, -1],\r\n            ['sorted', j, -1]\r\n        ]);\r\n\r\n        k++;\r\n        j++;\r\n      }\r\n    }\r\n\r\n    array = array.slice();\r\n\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\r\n    return animations;\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { bubbleSortAnimation, insertionSortAnimation, quickSortAnimation, shellSortAnimation, mergeSortAnimation } from \"./sort_components/sortingAlgorithms.js\"\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./SortingPage.css\";\r\n\r\nconst DEFAULT_COLOR = \"#0dcaf0\";\r\nconst SORTED_COLOR = \"#28a745\";\r\nconst SWAP_COLOR = \"#dc3545\";\r\nconst HEIGHT = 60;\r\n\r\nexport const SortingPage = () => {\r\n\r\n  const [prevTimeout, setPrevTimeout] = useState(0);\r\n  const [timeComplexity, setTimeComplexity] = useState({algo: '', best: '', avg: '', worst: ''});\r\n  const [numberOfBars, setNumberOfBars] = useState(100);\r\n  const [speed, setSpeed] = useState(50);\r\n\r\n  // Clears all setTimeout()'s [Hack]\r\n  const clearAllTimeouts = () => {\r\n    // Set a fake timeout to get the highest timeout id\r\n    let highestTimeoutId = setTimeout(()=>{});\r\n    for (let i = prevTimeout ; i < highestTimeoutId ; i++) {\r\n        clearTimeout(i); \r\n    }\r\n    setPrevTimeout(highestTimeoutId);\r\n  }\r\n\r\n  // Returns randomized array\r\n  const randomArray = (num = numberOfBars) => {\r\n    let min = HEIGHT/num;\r\n    let max = HEIGHT;\r\n    const array = [];\r\n    var step = (max-min) / (num - 1);\r\n    for (var i = 0; i < num; i++) {\r\n      array.push(HEIGHT/num + (step * i));\r\n    }\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      let temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  const resetColors = () => {\r\n    const arrayBars = [...document.getElementsByClassName('bar')];\r\n\r\n    arrayBars.forEach((bar) => {\r\n      bar.style.backgroundColor = DEFAULT_COLOR;\r\n    });\r\n  }\r\n\r\n  // Create randomized array upon launch of page\r\n  const [arr, setArr] = useState(randomArray());\r\n\r\n  // Resets array with default color and randomized values \r\n  const resetArray = () => {\r\n    clearAllTimeouts();\r\n\r\n    setTimeComplexity({algo: '', best: '', avg: '', worst: ''});\r\n\r\n    const array = randomArray();\r\n\r\n    const arrayBars = [...document.getElementsByClassName('bar')];\r\n\r\n    arrayBars.forEach((bar, index) => {\r\n      const offsetDelay = 750 * index / numberOfBars;\r\n      const duration = 200;\r\n      bar.style.height = `${array[index]}vh`;\r\n      bar.style.backgroundColor = DEFAULT_COLOR;\r\n      bar.animate([\r\n        {height: '0vh'},\r\n        {opacity: .1, height: '0vh', offset: offsetDelay / (offsetDelay + duration)},\r\n        {opacity: 1, height: `${array[index]}vh`}\r\n      ], {\r\n        // timing options\r\n        duration: offsetDelay + duration,\r\n        iterations: 1\r\n      });\r\n    });\r\n\r\n    setArr(array);\r\n  }\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const animate = (animations) => {\r\n    const delay = 1000/numberOfBars * 3 * Math.pow(1/3,speed/50)\r\n\r\n    clearAllTimeouts();\r\n\r\n    const arrayBars = Array.from(document.getElementsByClassName('bar'));\r\n    \r\n    resetColors();\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      setTimeout(() => {     \r\n        for (let j = 0; j < animations[i].length; j++) {\r\n          const [color, id, height] = animations[i][j];\r\n          const barStyle = arrayBars[id].style;\r\n\r\n          if (height !== -1) {\r\n            arr[id] = height;\r\n            barStyle.height = `${height}vh`;\r\n          }\r\n\r\n          if (color === 'swap') barStyle.backgroundColor = SWAP_COLOR;\r\n          if (color === 'clear') barStyle.backgroundColor = DEFAULT_COLOR;\r\n          if (color === 'sorted') barStyle.backgroundColor = SORTED_COLOR;\r\n        }\r\n      }, i * delay);\r\n    }\r\n  }\r\n\r\n  // Quick Sort\r\n  const quickSort = () => {\r\n    setTimeComplexity({\r\n      algo: 'Quick Sort',\r\n      best: 'Ω(nlogn)',\r\n      avg: 'θ(nlogn)',\r\n      worst: 'O(n^2)'\r\n    });\r\n\r\n    animate(quickSortAnimation(arr));\r\n  }\r\n\r\n  // Bubble Sort\r\n  const bubbleSort = () => {\r\n    setTimeComplexity({\r\n      algo: 'Bubble Sort',\r\n      best: 'Ω(n)',\r\n      avg: 'θ(n^2)',\r\n      worst: 'O(n^2)'\r\n    });\r\n\r\n    animate(bubbleSortAnimation(arr));\r\n  }\r\n\r\n  // Merge Sort (Credit to Clément Mihailescu for Merge Sort Implementation)\r\n  const mergeSort = () => {\r\n    setTimeComplexity({\r\n      algo: 'Merge Sort',\r\n      best: 'Ω(nlogn)',\r\n      avg: 'θ(nlogn)',\r\n      worst: 'O(nlogn)'\r\n    });\r\n\r\n    animate(mergeSortAnimation(arr));\r\n  }\r\n\r\n  // Shell Sort\r\n  const shellSort = () => {\r\n    setTimeComplexity({\r\n      algo: 'Shell Sort',\r\n      best: 'Ω(nlogn)',\r\n      avg: 'θ(nlogn)',\r\n      worst: 'O(n^2)'\r\n    });\r\n\r\n    animate(shellSortAnimation(arr));\r\n  }\r\n\r\n  // Insertion Sort\r\n  const insertionSort = () => {\r\n    setTimeComplexity({\r\n      algo: 'Insertion Sort',\r\n      best: 'Ω(n)',\r\n      avg: 'θ(n^2)',\r\n      worst: 'O(n^2)'\r\n    });\r\n\r\n    animate(insertionSortAnimation(arr));\r\n  }\r\n\r\n  return (\r\n    <div className=\"container sortingPage\">\r\n      \r\n      <h1 className=\"title\"> <Link to=\"/\"><i class=\"fas fa-arrow-circle-left fa-lg me-3 link-info\" aria-hidden=\"true\"></i></Link>Sorting Algorithms</h1>\r\n\r\n      {/* Dynamically sets bar heights */}\r\n      <div className=\"bars-container mb-3\" style={{'height': `${HEIGHT}vh`}}>\r\n        {arr.map((value,index) => \r\n            <div className=\"bar\" key={index} style={{'height': `${value}vh` }}></div>\r\n        )} \r\n      </div>\r\n      \r\n      <div className=\"row gap-3 mb-3\">\r\n        <div className=\"col-md-12 col-lg-9\">\r\n          <div className=\"mb-3 gap-2 d-flex justify-content-start flex-wrap\">\r\n            <button className=\"btn btn-info\" onClick={resetArray}>Reset</button>\r\n            <button className=\"btn btn-outline-light\" onClick={quickSort}>Quick Sort</button>\r\n            <button className=\"btn btn-outline-light\" onClick={shellSort}>Shell Sort</button>\r\n            <button className=\"btn btn-outline-light\" onClick={bubbleSort}>Bubble Sort</button>\r\n            <button className=\"btn btn-outline-light\" onClick={mergeSort}>Merge Sort</button>\r\n            <button className=\"btn btn-outline-light\" onClick={insertionSort}>Insertion Sort</button>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-6\">\r\n              <label className=\"form-label\"> Number of Bars : {numberOfBars} </label>\r\n              <input type=\"range\" step=\"1\" min=\"5\" max=\"500\" defaultValue={numberOfBars} className=\"form-range\"\r\n                onMouseDown={() => {\r\n                  clearAllTimeouts();\r\n                  resetColors();\r\n                }} \r\n                onChange={(e) => {\r\n                  setNumberOfBars(e.target.value);\r\n                  setArr(randomArray(e.target.value));\r\n                }} />\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-6\">\r\n              <label className=\"form-label\"> Animation Speed : {speed}% </label>\r\n              <input type=\"range\" step=\"1\" min=\"1\" max=\"100\" defaultValue={speed} className=\"form-range\"\r\n                onMouseDown={() => {\r\n                  clearAllTimeouts();\r\n                  resetColors();\r\n                }} \r\n                onChange={(e) => {\r\n                  setSpeed(e.target.value);\r\n                }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col\">\r\n          <table className=\"table table-sm table-borderless text-white w-auto mb-0\">\r\n            <tbody>\r\n              <tr>\r\n                <th className=\"pe-3 pt-0\" scope=\"row\">Algorithm</th>\r\n                <td className=\"pt-0\">{ timeComplexity.algo }</td>\r\n              </tr>\r\n              <tr>\r\n                <th className=\"pe-3 pt-0\" scope=\"row\">Best</th>\r\n                <td className=\"pt-0\">{ timeComplexity.best }</td>\r\n              </tr>\r\n              <tr>\r\n                <th className=\"pe-3 pt-0\" scope=\"row\">Average</th>\r\n                <td className=\"pt-0\">{ timeComplexity.avg }</td>\r\n              </tr>\r\n              <tr>\r\n                <th className=\"pe-3 pt-0\" scope=\"row\">Worst</th>\r\n                <td className=\"pt-0\">{ timeComplexity.worst }</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>    \r\n    </div>\r\n  );\r\n}","export class PriorityQueue {\r\n  constructor(comparator = (a, b) => a > b) {\r\n    this._heap = [];\r\n    this._comparator = comparator;\r\n    this.top = 0;\r\n\r\n  }\r\n  parent(i) { return ((i + 1) >>> 1) - 1 }\r\n\r\n  left(i) { return (i << 1) + 1 }\r\n\r\n  right(i) { return (i + 1) << 1 }\r\n  \r\n  size() {\r\n    return this._heap.length;\r\n  }\r\n  isEmpty() {\r\n    return this.size() === 0;\r\n  }\r\n  peek() {\r\n    return this._heap[this.top];\r\n  }\r\n  push(...values) {\r\n    values.forEach(value => {\r\n      this._heap.push(value);\r\n      this._siftUp();\r\n    });\r\n    return this.size();\r\n  }\r\n  pop() {\r\n    const poppedValue = this.peek();\r\n    const bottom = this.size() - 1;\r\n    if (bottom > this.top) {\r\n      this._swap(this.top, bottom);\r\n    }\r\n    this._heap.pop();\r\n    this._siftDown();\r\n    return poppedValue;\r\n  }\r\n  replace(value) {\r\n    const replacedValue = this.peek();\r\n    this._heap[this.top] = value;\r\n    this._siftDown();\r\n    return replacedValue;\r\n  }\r\n  _greater(i, j) {\r\n    return this._comparator(this._heap[i], this._heap[j]);\r\n  }\r\n  _swap(i, j) {\r\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\r\n  }\r\n  _siftUp() {\r\n    let node = this.size() - 1;\r\n    while (node > this.top && this._greater(node, this.parent(node))) {\r\n      this._swap(node, this.parent(node));\r\n      node = this.parent(node);\r\n    }\r\n  }\r\n  _siftDown() {\r\n    let node = this.top;\r\n    while (\r\n      (this.left(node) < this.size() && this._greater(this.left(node), node)) ||\r\n      (this.right(node) < this.size() && this._greater(this.right(node), node))\r\n    ) {\r\n      let maxChild = (this.right(node) < this.size() && this._greater(this.right(node), this.left(node))) ? this.right(node) : this.left(node);\r\n      this._swap(node, maxChild);\r\n      node = maxChild;\r\n    }\r\n  }\r\n}","/*\r\n\r\nQueue.js\r\n\r\nA function to represent a queue\r\n\r\nCreated by Kate Morley - http://code.iamkate.com/ - and released under the terms\r\nof the CC0 1.0 Universal legal code:\r\n\r\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\r\n\r\n*/\r\n\r\n/* Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -\r\n * items are added to the end of the queue and removed from the front.\r\n */\r\nexport class Queue {\r\n    constructor() {\r\n        this._queue = [];\r\n        this._offset = 0;\r\n\r\n    }\r\n  \r\n    // Returns the length of the queue.\r\n    getLength(){\r\n      return (this._queue.length - this._offset);\r\n    }\r\n  \r\n    // Returns true if the queue is empty, and false otherwise.\r\n    isEmpty(){\r\n      return (this._queue.length === 0);\r\n    }\r\n  \r\n    /* Enqueues the specified item. The parameter is:\r\n     *\r\n     * item - the item to enqueue\r\n     */\r\n    enqueue(item){\r\n      this._queue.push(item);\r\n    }\r\n  \r\n    /* Dequeues an item and returns it. If the queue is empty, the value\r\n     * 'undefined' is returned.\r\n     */\r\n    dequeue(){\r\n  \r\n      // if the queue is empty, return immediately\r\n      if (this._queue.length === 0) return undefined;\r\n  \r\n      // store the item at the front of the queue\r\n      var item = this._queue[this._offset];\r\n  \r\n      // increment the offset and remove the free space if necessary\r\n      if (++ this._offset * 2 >= this._queue.length){\r\n        this._queue  = this._queue.slice(this._offset);\r\n        this._offset = 0;\r\n      }\r\n  \r\n      // return the dequeued item\r\n      return item;\r\n  \r\n    }\r\n  \r\n    /* Returns the item at the front of the queue (without dequeuing it). If the\r\n     * queue is empty then undefined is returned.\r\n     */\r\n    peek() {\r\n      return (this._queue.length > 0 ? this._queue[this._offset] : undefined);\r\n    }\r\n  \r\n  }\r\n  ","import { PriorityQueue } from \"../data_structures/PriorityQueue\";\r\nimport { Queue } from \"../data_structures/Queue\";\r\n\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  const pq = new PriorityQueue((a,b) => a.dv < b.dv);\r\n  startNode.dv = 0;\r\n  pq.push(startNode);\r\n\r\n  while(!pq.isEmpty()) {\r\n    const currentNode = pq.pop();\r\n\r\n    if (!currentNode.known) {\r\n      currentNode.known = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      const neighbors = [];\r\n      const {row, col} = currentNode;\r\n\r\n      if (row > 0) neighbors.push(grid[row - 1][col]);\r\n      if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n      if (col > 0) neighbors.push(grid[row][col - 1]);\r\n      if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n      for (const neighbor of neighbors) {\r\n        const neighborType = neighbor.ref.className;\r\n\r\n        let weight = 1;\r\n        if (neighborType.startsWith('node-weight-')) weight = parseInt(neighborType.split('-')[2]);\r\n\r\n        if (!neighbor.known && neighborType !== 'node-wall' && neighbor.dv > currentNode.dv + weight) {\r\n          neighbor.dv = currentNode.dv + weight;\r\n          neighbor.pv = currentNode;\r\n          if (neighbor === endNode) {\r\n            visitedNodesInOrder.shift();\r\n            return visitedNodesInOrder;\r\n          }\r\n          pq.push(neighbor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  visitedNodesInOrder.shift();\r\n  return visitedNodesInOrder;\r\n}\r\n\r\n// A* Heuristics from http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\r\nfunction aStar(grid, startNode, endNode, type) {\r\n  const ERROR = 'Invalid A* Distance Type';\r\n  const visitedNodesInOrder = [];\r\n  \r\n  const open = [];\r\n  const closed = [];\r\n\r\n  startNode.f = 0;\r\n  startNode.g = 0;\r\n  startNode.h = 0;\r\n  open.push(startNode)\r\n\r\n  while (open.length !== 0) {\r\n\r\n    open.sort((a, b) => a.f - b.f);\r\n    const currentNode = open.shift();\r\n    closed.push(currentNode);\r\n    \r\n    if (currentNode === endNode) {\r\n      visitedNodesInOrder.shift();\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    const neighbors = [];\r\n    const {row, col} = currentNode;\r\n\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n    for (const neighbor of neighbors) {\r\n      \r\n      const neighborType = neighbor.ref.className;\r\n\r\n      if (neighborType === 'node-wall' || closed.includes(neighbor)) continue;\r\n\r\n      const [x1, y1] = [neighbor.row, neighbor.col];\r\n      const [x2, y2] = [endNode.row, endNode.col];\r\n\r\n      const dx = Math.abs(x2-x1);\r\n      const dy = Math.abs(y2-y1);\r\n\r\n      let hTemp = 0;\r\n\r\n      if (type === \"Manhattan\") hTemp = dx + dy;\r\n      else if (type === \"Diagonal\") hTemp = (dx + dy) - 0.58578644 * Math.min(dx, dy);\r\n      else if (type === \"Euclidean\") hTemp = Math.hypot(dx, dy);\r\n      else throw ERROR;\r\n\r\n      let weight = 1;\r\n      if (neighborType.startsWith('node-weight-')) weight = parseInt(neighborType.split('-')[2]);\r\n\r\n      const g = currentNode.g + weight;\r\n      const h = hTemp;\r\n      const f = g + h;\r\n\r\n      if (f < neighbor.f || !open.includes(neighbor)) {\r\n\r\n        neighbor.f = f;\r\n        neighbor.g = g;\r\n        neighbor.h = h;\r\n        neighbor.pv = currentNode;\r\n\r\n        if (!open.includes(neighbor))\r\n          open.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n\r\n  visitedNodesInOrder.shift();\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function aStarManhattan (grid, startNode, endNode) { return aStar(grid, startNode, endNode, \"Manhattan\"); }\r\n\r\nexport function aStarDiagonal (grid, startNode, endNode) { return aStar(grid, startNode, endNode, \"Diagonal\"); }\r\n\r\nexport function aStarEuclidean (grid, startNode, endNode) { return aStar(grid, startNode, endNode, \"Euclidean\"); }\r\n\r\n\r\nexport function breadthFirstSearch(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  const queue = new Queue();\r\n\r\n  startNode.known = true;\r\n  queue.enqueue(startNode);\r\n\r\n  while(!queue.isEmpty()) {\r\n    const currentNode = queue.dequeue();\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    const neighbors = [];\r\n    const {row, col} = currentNode;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n    for (const neighbor of neighbors) {\r\n      if (!neighbor.known && neighbor.ref.className !== 'node-wall') {\r\n        neighbor.pv = currentNode;\r\n        neighbor.known = true;\r\n        if (neighbor === endNode) {\r\n          visitedNodesInOrder.shift();\r\n          return visitedNodesInOrder;\r\n        }\r\n        queue.enqueue(neighbor);\r\n      }\r\n    }\r\n  }\r\n  visitedNodesInOrder.shift();\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function depthFirstSearch(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n\r\n  stack.push(startNode);\r\n\r\n  while(stack.length > 0) {\r\n    const currentNode = stack.pop();\r\n    if (currentNode === endNode) {\r\n      visitedNodesInOrder.shift();\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (!currentNode.known) visitedNodesInOrder.push(currentNode);\r\n    currentNode.known = true;\r\n\r\n    const neighbors = [];\r\n    const {row, col} = currentNode;\r\n    \r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\r\n    for (const neighbor of neighbors) {\r\n      if (!neighbor.known && neighbor.ref.className !== 'node-wall') {\r\n        neighbor.pv = currentNode;\r\n        stack.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n  visitedNodesInOrder.shift();\r\n  return visitedNodesInOrder;\r\n}\r\n\r\n\r\n  \r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode.pv;\r\n  if (!currentNode) return [];\r\n  while (currentNode.pv !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.pv;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\n","\r\nconst randEven = (min, max) => {\r\n    let x;\r\n    do { x = Math.floor(Math.random() * (max - min + 1) + min); }\r\n    while (x % 2 !== 0);\r\n    return x;\r\n};\r\nconst randOdd = (min, max) => {\r\n    let x;\r\n    do { x = Math.floor(Math.random() * (max - min + 1) + min); }\r\n    while (x % 2 === 0);\r\n    return x;\r\n};\r\n\r\nconst rand = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nconst map = (val, in_min, in_max, out_min, out_max) => {\r\n    return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n}\r\n\r\nconst clip = (val, min, max) => {\r\n    if (val < min) val = min;\r\n    if (val > max) val = max;\r\n    return val;\r\n}\r\n\r\nexport function recursiveDivision(grid) {\r\n    const walls = [];\r\n\r\n    const division = (grid, x1, y1, x2, y2) => {\r\n      // Recursion Termination\r\n      if (x2 - x1 < 3 || y2 - y1 < 3)\r\n        return;\r\n\r\n      // Randomly build the wall either horizontally or vertically\r\n      let isHorizontal = Math.random() < ((y2 - y1) /((x2 - x1) + (y2 - y1)));\r\n    \r\n      // Randomly select the position to build the wall (disconnect cells along the line)\r\n      let wallIdx = isHorizontal ? randEven(y1+1, y2-1) : randEven(x1+1, x2-1);\r\n      let pathIdx = isHorizontal ? randOdd(x1+1, x2-1) : randOdd(y1+1, y2-1);\r\n    \r\n      // Recurse on sub areas\r\n      if (isHorizontal)\r\n      {\r\n        for(let i = x1 + 1; i < x2; i++) {\r\n            if (i === pathIdx) continue;\r\n            walls.push([wallIdx, i]);\r\n        }\r\n        division(grid, x1, y1, x2, wallIdx);\r\n        division(grid, x1, wallIdx, x2, y2);\r\n      }\r\n      else\r\n      {\r\n        for(let i = y1 + 1; i < y2; i++) {\r\n            if (i === pathIdx) continue;\r\n            walls.push([i, wallIdx]);\r\n        }\r\n        division(grid, x1, y1, wallIdx, y2);\r\n        division(grid, wallIdx, y1, x2, y2);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < grid.length; i++) {\r\n        walls.push([i, 0]);\r\n        walls.push([grid.length - i - 1, grid[0].length - 1]);\r\n    }\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n        walls.push([0, grid[0].length - j - 1]);\r\n        walls.push([grid.length - 1, j]);\r\n    }\r\n\r\n    division(grid, 0, 0, grid[0].length-1, grid.length-1);\r\n\r\n    return walls;\r\n}\r\n\r\nexport function randomMaze(grid) {\r\n    const walls = [];\r\n    for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            if (Math.random() < .3) {\r\n                walls.push([row, col]);\r\n            }\r\n        }\r\n    }\r\n    return walls;\r\n}\r\n\r\nexport function randomWeightedMaze(grid) {\r\n    const walls = [];\r\n    for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            walls.push([row, col, rand(2,30)]);\r\n        }\r\n    }\r\n    return walls;\r\n}\r\n\r\n//https://stackoverflow.com/questions/23843197/maze-generating-algorithm-in-grid\r\nexport function prims(grid) {\r\n    const walls = [];\r\n    const minSpanTree = [];\r\n    const tmp = []\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n        const curRow = [];\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            curRow.push(true);\r\n        }\r\n        tmp.push(curRow);\r\n    }\r\n\r\n    const frontier = [];\r\n    const [startRow, startCol] = [randOdd(1, tmp.length-2), randOdd(1, tmp[0].length-2)]\r\n    frontier.push([startRow, startCol, startRow, startCol]);\r\n\r\n    while (frontier.length > 0) {\r\n        const randIdx = rand(0, frontier.length - 1)\r\n        const f = frontier[randIdx];\r\n        frontier.splice(randIdx, 1);\r\n\r\n        const row = f[2];\r\n        const col = f[3];\r\n\r\n        if (tmp[row][col] === true) {\r\n            tmp[row][col] = false;\r\n            tmp[f[0]][f[1]] = false;\r\n\r\n            minSpanTree.push([row, col]);\r\n\r\n            if (row > 1 && tmp[row - 2][col] === true) frontier.push([row - 1, col, row - 2, col]);\r\n            if (row < tmp.length - 2 && tmp[row + 2][col] === true) frontier.push([row + 1, col, row + 2, col]);\r\n            if (col > 1 && tmp[row][col - 2] === true) frontier.push([row, col - 1, row, col - 2]);\r\n            if (col < tmp[0].length - 2 && tmp[row][col + 2] === true) frontier.push([row, col + 1, row, col + 2]);\r\n        }  \r\n    }\r\n\r\n    for (let coord of minSpanTree) {\r\n        let [row, col] = coord;\r\n\r\n        for (let coord of [\r\n            [row - 1, col - 1], \r\n            [row - 1, col], \r\n            [row - 1, col + 1], \r\n            [row, col + 1], \r\n            [row + 1, col + 1],\r\n            [row + 1, col],\r\n            [row + 1, col - 1],\r\n            [row, col - 1]\r\n        ]) {    \r\n            if (\r\n                coord[0] >= 0 && \r\n                coord[0] < grid.length && \r\n                coord[1] >= 0 && \r\n                coord[1] < grid[0].length && \r\n                tmp[coord[0]][coord[1]]\r\n            ) {\r\n                walls.push(coord);\r\n                tmp[coord[0]][coord[1]] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\nexport function dfsMaze(grid) {\r\n    const walls = [];\r\n    const dfsTree = [];\r\n    const tmp = []\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n        const curRow = [];\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            curRow.push(true);\r\n        }\r\n        tmp.push(curRow);\r\n    }\r\n\r\n    const stack = [];\r\n    const [startRow, startCol] = [randOdd(1, tmp.length-2), randOdd(1, tmp[0].length-2)]\r\n    stack.push([startRow, startCol, startRow, startCol]);\r\n\r\n    while (stack.length > 0) {\r\n        const f = stack.pop();\r\n\r\n        const row = f[2];\r\n        const col = f[3];\r\n\r\n        if (tmp[row][col]) {\r\n            tmp[row][col] = false;\r\n            tmp[f[0]][f[1]] = false;\r\n\r\n            dfsTree.push([row, col]);\r\n\r\n            const neighbors = [];\r\n\r\n            if (row > 1 && tmp[row - 2][col] === true) { \r\n                neighbors.push([row-1, col, row-2, col])\r\n            } \r\n\r\n            if (row < tmp.length - 2 && tmp[row + 2][col] === true) { \r\n                neighbors.push([row+1, col, row+2, col]);\r\n            } \r\n\r\n            if (col > 1 && tmp[row][col - 2] === true) { \r\n                neighbors.push([row, col -1 , row, col-2])\r\n            } \r\n\r\n            if (col < tmp[0].length - 2 && tmp[row][col + 2] === true) { \r\n                neighbors.push([row, col+1, row, col+2])\r\n            } \r\n\r\n            if (neighbors.length > 0) {\r\n                const randIdx = rand(0, neighbors.length -1);\r\n                for (let i = 0; i < neighbors.length; i++) {\r\n                    if (i !== randIdx) stack.splice(rand(0,stack.length), 0, neighbors[i]);\r\n                }\r\n                stack.push(neighbors[randIdx]);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let coord of dfsTree) {\r\n        let [row, col] = coord;\r\n\r\n        for (let coord of [\r\n            [row - 1, col - 1], \r\n            [row - 1, col], \r\n            [row - 1, col + 1], \r\n            [row, col + 1], \r\n            [row + 1, col + 1],\r\n            [row + 1, col],\r\n            [row + 1, col - 1],\r\n            [row, col - 1]\r\n        ]) {    \r\n            if (\r\n                coord[0] >= 0 && \r\n                coord[0] < grid.length && \r\n                coord[1] >= 0 && \r\n                coord[1] < grid[0].length && \r\n                tmp[coord[0]][coord[1]]\r\n            ) {\r\n                walls.push(coord);\r\n                tmp[coord[0]][coord[1]] = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return walls;\r\n}\r\n\r\nexport function binaryTreeMaze(grid) {\r\n    const walls = [];\r\n    const bst = [];\r\n    const tmp = [];\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n        const curRow = [];\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            curRow.push(true);\r\n        }\r\n        tmp.push(curRow);\r\n    }\r\n\r\n    for (let row = 1; row < grid.length; row += 2) {\r\n        for (let col = 1; col < grid[0].length; col += 2) {\r\n            tmp[row][col] = false;\r\n            bst.push([row,col]);\r\n\r\n            const connections = [];\r\n\r\n            if (row > 1) connections.push([row - 1, col]);\r\n            if (col > 1) connections.push([row, col - 1]);\r\n\r\n            if (connections.length > 0) {\r\n                const connection = connections[rand(0, connections.length - 1)];\r\n                tmp[connection[0]][connection[1]] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let coord of bst) {\r\n        let [row, col] = coord;\r\n\r\n        for (let coord of [\r\n            [row - 1, col - 1], \r\n            [row - 1, col], \r\n            [row - 1, col + 1], \r\n            [row, col + 1], \r\n            [row + 1, col + 1],\r\n            [row + 1, col],\r\n            [row + 1, col - 1],\r\n            [row, col - 1]\r\n        ]) {    \r\n            if (\r\n                coord[0] >= 0 && \r\n                coord[0] < grid.length && \r\n                coord[1] >= 0 && \r\n                coord[1] < grid[0].length && \r\n                tmp[coord[0]][coord[1]]\r\n            ) {\r\n                walls.push(coord);\r\n                tmp[coord[0]][coord[1]] = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return walls;\r\n}\r\n\r\n\r\nvar SimplexNoise = require('simplex-noise');\r\n\r\nexport function terrainMap(grid) {\r\n    const weights = [];\r\n    const simplex = new SimplexNoise(Math.random)\r\n    for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            weights.push([\r\n                row, \r\n                col, \r\n                Math.floor(map(clip(simplex.noise2D(.075* row, .075 *col), -.6, .6), -.6, .6, 2, 30))\r\n            ]);\r\n        }\r\n    }\r\n    return weights;\r\n}\r\n\r\n\r\nexport function fileReaderTerrain(grid, reader) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!reader) reject(\"invalid reader\")\r\n        // Update Grid with Reader Data (Reader holds image data)\r\n        reader.onload = function (event) {\r\n            \r\n            const imgElement = document.createElement(\"img\");\r\n            imgElement.src = event.target.result;\r\n\r\n            imgElement.onload = function (e) {\r\n\r\n                // Resize Image to Dimensions of Grid\r\n                const canvas = document.createElement(\"canvas\");\r\n\r\n                canvas.width = grid[0].length;\r\n                canvas.height = grid.length;\r\n\r\n                const ctx = canvas.getContext(\"2d\");\r\n                ctx.drawImage(e.target, 0, 0, canvas.width, canvas.height);\r\n\r\n\r\n                // Retrieve RGBA pixel values of resized image\r\n                let imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                let pixels = imgData.data;\r\n\r\n                // Convert RGBA to Greyscale Weight (range 2-30)\r\n                const greyscaleWeights = [];\r\n                for (var i = 0; i < pixels.length; i += 4) {\r\n                    let lightness = parseInt((pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3);\r\n                    greyscaleWeights.push(Math.round(map(lightness,0,255,2,30)));\r\n                }\r\n\r\n                // Create Weighted Walls\r\n                const walls = [];\r\n                let idx = 0;\r\n                for (let row = 0; row < grid.length; row++) {\r\n                    for (let col = 0; col < grid[0].length; col++) {\r\n                        walls.push([row, col, greyscaleWeights[idx++]]);\r\n                    }\r\n                }\r\n\r\n                resolve(walls);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/*\r\nwalls.push(grid[f[0] + (f[1] - col)][f[1] + (f[0] - row)])\r\nwalls.push(grid[f[0] - (f[1] - col)][f[1] - (f[0] - row)])\r\n\r\nelse {\r\n    walls.push(grid[f[0]][f[1]])\r\n}\r\n*/\r\n\r\n","import { forwardRef } from \"react\"\r\nimport \"./Node.scss\";\r\n\r\nexport const Node = forwardRef((props, ref) => {\r\n  const {row, col, type} = props;\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div\r\n        ref={ref}\r\n        id={`node-${row}-${col}`}\r\n        className={type}\r\n      >\r\n        <div\r\n          \r\n        >\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n});","export default __webpack_public_path__ + \"static/media/tutorial_page_1.5de78eab.gif\";","export default __webpack_public_path__ + \"static/media/tutorial_page_2.a22faa6b.gif\";","export default __webpack_public_path__ + \"static/media/tutorial_page_3.58e0ed19.gif\";","export default __webpack_public_path__ + \"static/media/tutorial_page_4.0eed5ae8.gif\";","import \"./GraphPage.css\";\r\n\r\nimport { dijkstra, aStarManhattan, aStarDiagonal, aStarEuclidean, depthFirstSearch, breadthFirstSearch, getNodesInShortestPathOrder } from \"./graph_components/graphAlgorithms\";\r\nimport { recursiveDivision, randomMaze, randomWeightedMaze, prims, dfsMaze, binaryTreeMaze, terrainMap, fileReaderTerrain } from \"./graph_components/mazeAlgorithms\";\r\n\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {Node} from './graph_components/Node';\r\nimport Webcam from \"react-webcam\";\r\n\r\nimport tutorialGif1 from './graph_components/tutorial/tutorial_page_1.gif';\r\nimport tutorialGif2 from './graph_components/tutorial/tutorial_page_2.gif';\r\nimport tutorialGif3 from './graph_components/tutorial/tutorial_page_3.gif';\r\nimport tutorialGif4 from './graph_components/tutorial/tutorial_page_4.gif';\r\n\r\n// decided to not use states since they were too slow\r\nlet nodeSize = 1.6;\r\nlet prevTimeout = 0;\r\nlet mouseButton = -1;\r\nlet startRow, startCol, endRow, endCol = null;\r\nlet selectedNode = null;\r\nlet startCoveredOverNode = null;\r\nlet endCoveredOverNode = null;\r\nlet currentAlgorithm = null;\r\nlet placeableNode = 'node-wall';\r\nlet animationSpeed = 50;\r\n\r\nconst pxToNode = px => Math.floor(px / parseFloat(getComputedStyle(document.documentElement).fontSize) / nodeSize);\r\n  \r\nexport const GraphPage = () => {\r\n  // grid\r\n  const grid = useRef([]).current;\r\n  const gridRef = useRef();\r\n  const [dimensions, setDimensions] = useState(null);\r\n\r\n  // slider\r\n  const exampleWeightRef = useRef();\r\n\r\n  // webcam\r\n  const webCamRef = useRef();\r\n  const [webcamEnabled, setWebcamState] = useState(false);\r\n\r\n  // tutorial\r\n  const [tutorialPage, setTutorialPage] = useState(1);\r\n\r\n  // INITIALIZATION\r\n\r\n  useEffect(() => {\r\n\r\n    animationSpeed = 50;\r\n    nodeSize = 1.6;\r\n    placeableNode = 'node-wall';\r\n\r\n    requestAnimationFrame(() => {\r\n      [startRow, startCol] = [2,2];\r\n      [endRow, endCol] = [grid.length-3, grid[0].length-3];\r\n      resetGrid();\r\n    })\r\n\r\n    resizeGrid();\r\n    window.addEventListener('resize', resizeGrid);\r\n    document.addEventListener(\"mousedown\", handleMouseDown);\r\n    document.addEventListener(\"mousemove\", handleMouseMove);\r\n    document.addEventListener(\"mouseup\", handleMouseUp);\r\n    gridRef.current.addEventListener(\"contextmenu\", e => e.preventDefault());\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', resizeGrid);\r\n      document.removeEventListener(\"mousedown\", handleMouseDown);\r\n      document.removeEventListener(\"mousemove\", handleMouseMove);\r\n      document.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // READ IMAGES\r\n\r\n  const readWebcam = () => {\r\n    // https://github.com/mozmorris/react-webcam/issues/65#issuecomment-385126201\r\n    const dataURLtoBlob = (dataurl) => {\r\n      var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n          bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\r\n      while(n--){\r\n          u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      return new Blob([u8arr], {type:mime});\r\n    }\r\n\r\n    const screenshot = webCamRef.current.getScreenshot();\r\n    if (!screenshot) return null;\r\n    const blob =  dataURLtoBlob(screenshot);\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(blob);\r\n\r\n    return reader;\r\n  }\r\n\r\n  const readImageInput = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return null;\r\n\r\n    e.target.value = \"\";\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    \r\n    return reader;\r\n  }   \r\n  \r\n  // MOUSE HANDLERS\r\n\r\n  const handleMouseDown = e => {\r\n    mouseButton = e.button;\r\n\r\n    if (!e.target.parentNode.id) return;\r\n    let [name, row, col] = e.target.parentNode.id.split('-');\r\n    \r\n    if (name !== \"node\") return;\r\n\r\n    const node = grid[row][col];\r\n\r\n    if (mouseButton === 0) {\r\n      if (node.ref.className === 'node-start') {\r\n        selectedNode = 'node-start';\r\n      }\r\n      else if (node.ref.className === 'node-end') {\r\n        selectedNode = 'node-end';\r\n      }\r\n      else if (node.ref.className === placeableNode) {\r\n        return;\r\n      }\r\n      else {\r\n        node.ref.className = placeableNode;\r\n        if (currentAlgorithm) runAlgorithm(null, true);\r\n        else animateElement(node.ref, 100);\r\n      }\r\n    }\r\n    else if (mouseButton === 2) {\r\n      if (node.ref.className === 'node-wall' || node.ref.className.startsWith('node-weight-')) {\r\n        node.ref.className = 'node-empty';\r\n        if (currentAlgorithm) runAlgorithm(null, true);\r\n      }\r\n    }    \r\n  }\r\n\r\n  const handleMouseMove = e => {\r\n    if (mouseButton === -1) return;\r\n\r\n    if (!e.target.parentNode.id) return;\r\n    let [name, row, col] = e.target.parentNode.id.split('-');\r\n\r\n    if (name !== 'node') return;\r\n\r\n    const node = grid[row][col];\r\n\r\n    if (mouseButton === 0) {\r\n      if (node.ref.className === 'node-start') {\r\n        return;\r\n      }\r\n      else if (node.ref.className === 'node-end') {\r\n        return;\r\n      }\r\n      else {\r\n        if (selectedNode === 'node-start') {\r\n          const prevNode = grid[startRow][startCol];\r\n\r\n          if (startCoveredOverNode && (startCoveredOverNode === 'node-wall' || startCoveredOverNode.startsWith('node-weight-'))) prevNode.ref.className = startCoveredOverNode;\r\n          else prevNode.ref.className = 'node-empty';\r\n          startCoveredOverNode = node.ref.className;\r\n\r\n          node.ref.className = 'node-start';\r\n          [startRow, startCol] = [row, col];\r\n\r\n          if (currentAlgorithm) runAlgorithm(null, true);\r\n          else animateElement(node.ref, 50, [\r\n            {transform: `scale(.75)`},\r\n            {transform: 'scale(1)'}\r\n          ]);\r\n        }\r\n        else if (selectedNode === 'node-end') {\r\n          const prevNode = grid[endRow][endCol];\r\n\r\n          if (endCoveredOverNode && (endCoveredOverNode === 'node-wall' || endCoveredOverNode.startsWith('node-weight-'))) prevNode.ref.className = endCoveredOverNode;\r\n          else prevNode.ref.className = 'node-empty';\r\n          endCoveredOverNode = node.ref.className;\r\n\r\n          node.ref.className = 'node-end';\r\n          [endRow, endCol] = [row, col];\r\n\r\n          if (currentAlgorithm) runAlgorithm(null, true);\r\n          else animateElement(node.ref, 50, [\r\n            {transform: `scale(.75)`},\r\n            {transform: 'scale(1)'}\r\n          ]);\r\n        }\r\n        else if (node.ref.className !== placeableNode) {\r\n          node.ref.className = placeableNode;\r\n          if (currentAlgorithm) runAlgorithm(null, true);\r\n          else animateElement(node.ref, 100);\r\n        }\r\n      }\r\n    }\r\n    else if (mouseButton === 2) {\r\n      if (node.ref.className === 'node-wall' || node.ref.className.startsWith('node-weight-')) {\r\n        node.ref.className = 'node-empty';\r\n        if (currentAlgorithm) runAlgorithm(null, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    mouseButton = -1;\r\n    selectedNode = null;\r\n  }\r\n\r\n  //RUNNING ALGORITHMS\r\n\r\n  const runAlgorithm = (algorithmFunction = null, noDelay = false) => {\r\n    clearVisualization();\r\n\r\n    if (algorithmFunction) currentAlgorithm = algorithmFunction;\r\n\r\n    const visitedNodesInOrder = currentAlgorithm(grid, grid[startRow][startCol], grid[endRow][endCol]);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[endRow][endCol]);\r\n\r\n    if (noDelay) {\r\n      for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n        visitedNodesInOrder[i].ref.childNodes[0].className = 'node-visited';\r\n      }\r\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        nodesInShortestPathOrder[i].ref.childNodes[0].className = 'node-shortest-path';\r\n      }\r\n    }\r\n    else {\r\n      const delay = 10000 / (dimensions.rows * dimensions.cols) * 5 * Math.pow(1/5,animationSpeed/50);\r\n      const iterPerTimeout = delay > 3 ? 1 : Math.ceil(3 / delay);\r\n      const animate = iterPerTimeout < 2 && nodeSize > 1 ? true : false;\r\n\r\n      for (let i = 0; i < visitedNodesInOrder.length; i += iterPerTimeout) {\r\n        setTimeout(() => {\r\n          for (let j = i; j < i + iterPerTimeout && j < visitedNodesInOrder.length; j++) {\r\n            const overlay = visitedNodesInOrder[j].ref.childNodes[0];\r\n            overlay.className = 'node-visited';\r\n            if (animate) {\r\n              animateElement(overlay, 200, [\r\n                {transform: `scale(0)`, borderRadius: '100%'},\r\n                {transform: 'scale(1)', borderRadius: 0}\r\n              ]);\r\n            }\r\n          }\r\n        }, delay * i);\r\n      }\r\n      const pathDelay = delay * 5 < 15 ? 15 : (delay * 5 > 50 ? 50 : delay * 5);\r\n      setTimeout(() => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n          setTimeout(() => {\r\n            const overlay = nodesInShortestPathOrder[i].ref.childNodes[0];\r\n            overlay.className = 'node-shortest-path';\r\n            if (animate) animateElement(overlay, 200);\r\n          }, pathDelay * i);\r\n        }\r\n      }, delay * visitedNodesInOrder.length)\r\n    }\r\n  }\r\n\r\n  const generateMaze = (mazeFunction) => {\r\n    resetGrid();\r\n    const walls = mazeFunction(grid);\r\n\r\n    const delay = 2250 / walls.length;\r\n    const wallsPerIteration = delay > 2 ? 1 : Math.ceil(2 / delay);\r\n\r\n    for (let i = 0; i < walls.length; i += wallsPerIteration) {\r\n      setTimeout(() => {\r\n        for (let j = i; j < i + wallsPerIteration && j < walls.length; j++) {\r\n          const node = grid[walls[j][0]][walls[j][1]];\r\n          let weight = null;\r\n          if (walls[j].length === 3) weight = walls[j][2];\r\n\r\n          if (\r\n            node.ref.className !== 'node-start' &&\r\n            node.ref.className !== 'node-end'\r\n          ) {\r\n            if (weight) node.ref.className = `node-weight-${weight}`;\r\n            else node.ref.className = 'node-wall';\r\n          }\r\n        }\r\n      }, delay * i);\r\n    }\r\n  } \r\n\r\n  // GRID FUNCTIONS\r\n\r\n  const resetGrid = () => {\r\n    startCoveredOverNode = null;\r\n    endCoveredOverNode = null;\r\n    currentAlgorithm = null;\r\n    clearAllTimeouts();\r\n\r\n    for (let row=0; row<grid.length; row++) {\r\n      for (let col=0; col<grid[0].length; col++) {\r\n        const node = grid[row][col];\r\n        if ((endRow !== row || endCol !== col) && (startRow !== row || startCol !== col))\r\n          node.ref.className = 'node-empty';\r\n          node.ref.childNodes[0].className = 'node-empty';\r\n\r\n        resetNode(node);\r\n      }\r\n    }\r\n    grid[endRow][endCol].ref.className = 'node-end';\r\n    grid[startRow][startCol].ref.className = 'node-start';\r\n  }\r\n\r\n  const clearVisualization = (completeStop = false) => {\r\n    if (completeStop) currentAlgorithm = null;\r\n    clearAllTimeouts();\r\n\r\n    for (let row=0; row<grid.length; row++) {\r\n      for (let col=0; col<grid[0].length; col++) {\r\n        const node = grid[row][col];\r\n        node.ref.childNodes[0].className = 'node-empty';\r\n        resetNode(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  const resizeGrid = async () => {\r\n    clearAllTimeouts();\r\n\r\n    let rows = pxToNode(gridRef.current.offsetHeight);\r\n    let cols = pxToNode(gridRef.current.offsetWidth);\r\n    \r\n    if (rows > 1 && rows % 2 === 0) rows--;\r\n    if (cols > 1 && cols % 2 === 0) cols--;\r\n\r\n    await setDimensions({\r\n      rows: rows, \r\n      cols: cols\r\n    });\r\n\r\n    if (startRow && startCol && endRow && endCol) {\r\n      if (startRow > rows - 1) startRow = rows - 1;\r\n      if (startCol > cols - 1) startCol = cols - 1;\r\n      if (endRow > rows - 1) endRow = rows - 1;\r\n      if (endCol > cols - 1) endCol = cols - 1;\r\n      if ((startRow === endRow) && (startCol === endCol))\r\n        startCol -= 1;\r\n      grid[endRow][endCol].ref.className = 'node-end';\r\n      grid[startRow][startCol].ref.className = 'node-start';\r\n    }\r\n\r\n    if (currentAlgorithm) runAlgorithm(null, true);\r\n  }\r\n\r\n  // NODE FUNCTIONS\r\n\r\n  const createNode = (refs, rows, cols) => {\r\n    return {\r\n      ref: refs,\r\n      row: rows,\r\n      col: cols,\r\n      g: Infinity,\r\n      h: Infinity,\r\n      f: Infinity,\r\n      dv: Infinity,\r\n      known: false,\r\n      pv: null\r\n    }\r\n  }\r\n\r\n  const animateElement = (element, time, animation = [{transform: `scale(0)`}, {transform: 'scale(1)'}]) => {\r\n    element.animate(animation, {\r\n      duration: time,\r\n      iterations: 1\r\n    });\r\n  }\r\n\r\n  const resetNode = (node) => {\r\n    node.dv = Infinity;\r\n    node.known = false;\r\n    node.pv = null;\r\n    node.g = Infinity;\r\n    node.h = Infinity;\r\n    node.f = Infinity;\r\n  }\r\n\r\n  // TOOLS\r\n\r\n  const clearAllTimeouts = () => {\r\n    const highestTimeoutId = setTimeout(()=>{});\r\n    for (let i = prevTimeout ; i < highestTimeoutId ; i++) {\r\n        clearTimeout(i); \r\n    }\r\n    prevTimeout = highestTimeoutId;\r\n  }\r\n\r\n  // MAKE GRID HTML\r\n \r\n  const makeGridElement = () => {\r\n    grid.length = 0;\r\n\r\n    return (\r\n      <div className=\"grid d-flex flex-column flex-grow-1\" ref={gridRef}>\r\n        { dimensions &&\r\n          [...Array(dimensions.rows)].map((e1,r) => {\r\n            const currentRow = [];\r\n            const elementRow = (\r\n              <div className=\"grid-row d-flex flex-row\" key={r}>\r\n                {\r\n                  [...Array(dimensions.cols)].map((e2,c) => {\r\n                    return (\r\n                      <Node \r\n                        ref={ref=>currentRow.push(createNode(ref, r, c))}\r\n                        key={c}\r\n                        row={r}\r\n                        col={c}\r\n                        type={'node-empty'}\r\n                      />\r\n                    );\r\n                  })\r\n                }\r\n              </div>\r\n            );\r\n            grid.push(currentRow);\r\n            return elementRow;\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"graphPage\">\r\n      {/* SIDEBAR */}\r\n      <div className=\"sidebar d-flex flex-column bg-black\">\r\n\r\n        <h5 className=\"pb-3 mb-3 border-bottom\"><Link to=\"/\"><i className=\"fas link-info fa-arrow-circle-left fa-lg me-3\"></i></Link>Graph Algorithms</h5>\r\n\r\n        <div className=\"mb-3 gap-2 d-flex flex-row justify-content-start flex-wrap\">\r\n          <button className=\"btn btn-sm btn-warning\" onClick={resetGrid}>Reset Board</button>\r\n          <button className=\"btn btn-sm btn-info\" onClick={() => {clearVisualization(true);}}>Clear Visualization</button>\r\n        </div>\r\n\r\n        <div className=\"scrollarea flex-grow-1\">\r\n          <ul className=\"list-unstyled mb-0 ps-0 bg-dark rounded\">\r\n            <li>\r\n              <button className=\"btn btn-toggle align-items-center rounded mb-1\" data-bs-toggle=\"collapse\" data-bs-target=\"#home-collapse\" aria-expanded=\"false\">\r\n                Unweighted Pathfinding\r\n              </button>\r\n              <div className=\"collapse\" id=\"home-collapse\">\r\n                <ul className=\"btn-toggle-nav list-unstyled fw-normal pb-1 small\">\r\n                  <li onClick={()=> {runAlgorithm(breadthFirstSearch)}}><i className=\"fas fa-search-location fa-sm\"></i>Breadth First Search</li>\r\n                  <li onClick={()=> {runAlgorithm(depthFirstSearch)}}><i className=\"fas fa-layer-group fa-sm\"></i>Depth First Search</li>\r\n                </ul>\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <button className=\"btn btn-toggle align-items-center rounded mb-1\" data-bs-toggle=\"collapse\" data-bs-target=\"#dashboard-collapse\" aria-expanded=\"false\">\r\n                Weighted Pathfinding\r\n              </button>\r\n              <div className=\"collapse\" id=\"dashboard-collapse\">\r\n                <ul className=\"btn-toggle-nav list-unstyled fw-normal pb-1 small\">\r\n                  <li onClick={()=> {runAlgorithm(dijkstra)}}><i className=\"fas fa-project-diagram fa-sm\"></i>Dijkstra</li>\r\n                  <li onClick={()=> {runAlgorithm(aStarManhattan)}}><i className=\"far fa-star fa-sm\"></i>A* (Manhattan)</li>\r\n                  <li onClick={()=> {runAlgorithm(aStarDiagonal)}}><i className=\"far fa-star fa-sm\"></i>A* (Diagonal)</li>\r\n                  <li onClick={()=> {runAlgorithm(aStarEuclidean)}}><i className=\"far fa-star fa-sm\"></i>A* (Euclidean)</li>\r\n                </ul>\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <button className=\"btn btn-toggle align-items-center rounded mb-1\" data-bs-toggle=\"collapse\" data-bs-target=\"#orders-collapse\" aria-expanded=\"false\">\r\n                Mazes\r\n              </button>\r\n              <div className=\"collapse\" id=\"orders-collapse\">\r\n                <ul className=\"btn-toggle-nav list-unstyled fw-normal pb-1 small\">\r\n                  <li onClick={() => {generateMaze(recursiveDivision)}}><i className=\"fas fa-sync-alt fa-sm\"></i>Recursive Maze</li>\r\n                  <li onClick={() => {generateMaze(prims)}}><i className=\"fab fa-pagelines fa-sm\"></i>Prims Maze</li>\r\n                  <li onClick={() => {generateMaze(dfsMaze)}}><i className=\"fas fa-layer-group fa-sm\"></i>DFS Maze</li>\r\n                  <li onClick={() => {generateMaze(binaryTreeMaze)}}><i className=\"fas fa-code-branch fa-sm\"></i>Binary Tree Maze</li>\r\n                  <li onClick={() => {generateMaze(randomMaze)}}><i className=\"fas fa-random fa-sm\"></i>Random Maze</li>\r\n                  <li onClick={() => {generateMaze(randomWeightedMaze)}}><i className=\"fas fa-weight-hanging fa-sm\"></i>Random Weighted Maze</li>\r\n                  <li onClick={() => {generateMaze(terrainMap)}}><i className=\"fas fa-mountain fa-sm\"></i>Natural Terrain</li>\r\n                  <label className=\"w-100\"><li>\r\n                    <input type=\"file\" onChange={(e) => {fileReaderTerrain(grid, readImageInput(e)).then(walls => generateMaze(() => walls)).catch((err) => {console.log(err)})}} accept=\".jpg, .jpeg, .png\"/>\r\n                    <i className=\"far fa-image fa-sm\"></i>Image Terrain\r\n                  </li></label>\r\n\r\n                  <li type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#modal\" onClick={()=>{setWebcamState(true)}}><i className=\"fas fa-camera fa-sm\"></i>Webcam Terrain</li>\r\n                </ul>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <button className=\"btn btn-toggle align-items-center rounded my-1\" data-bs-toggle=\"collapse\" data-bs-target=\"#settings-collapse\" aria-expanded=\"false\">\r\n          Options\r\n        </button>\r\n        <div className=\"collapse show settings-menu\" id=\"settings-collapse\">\r\n          {/* Wall Weight Slider */}\r\n          <div className=\"mb-1 gap-2 d-flex justify-content-start align-items-center flex-wrap\">\r\n            <label className=\"form-label m-0\"> Set Wall Weight : </label>\r\n            <div ref={exampleWeightRef} id=\"example-weight\" className=\"node-wall\"></div>\r\n          </div>\r\n          <input type=\"range\" step=\"1\" min=\"2\" max=\"31\" defaultValue={31} className=\"form-range\"\r\n            onChange={(e) => {\r\n              const value = parseInt(e.target.value);\r\n              if (value === 31) placeableNode = 'node-wall';\r\n              else if (value >= 2 || value <= 30) placeableNode = `node-weight-${Math.floor(value)}`\r\n              exampleWeightRef.current.className = placeableNode;\r\n            }} />\r\n\r\n          {/* Grid Size Slider */}\r\n          <label className=\"form-label d-block mb-1\"> Set Grid Size : </label>\r\n          <input type=\"range\" step=\".2\" min=\".6\" max=\"3.2\" defaultValue={1.6} className=\"form-range\"\r\n            onChange={(e) => {\r\n              nodeSize = e.target.value;\r\n              resizeGrid();\r\n            }} />\r\n\r\n          {/* Animation Speed Slider */}\r\n          <label className=\"form-label d-block mb-1\">Animation Speed : </label>\r\n          <input type=\"range\" step=\"1\" min=\"1\" max=\"100\" defaultValue={50} className=\"form-range mb-2\"\r\n            onChange={(e) => {\r\n              clearVisualization(true);\r\n              animationSpeed = parseInt(e.target.value);\r\n            }} />\r\n\r\n          <button className=\"btn btn-outline-light\" data-bs-toggle=\"modal\" data-bs-target=\"#tutorial\">\r\n            <i className=\"fas fa-question-circle\"></i>\r\n            Tutorial\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Graph Algorithm Grid */}\r\n      {makeGridElement()}\r\n        \r\n      {/* Webcam Popup Window */}\r\n      <div className=\"modal fade\" id=\"modal\" tabIndex=\"-1\" aria-labelledby=\"modal-label\" aria-hidden=\"false\">\r\n        <div className=\"modal-dialog modal-dialog-centered modal-lg\">\r\n          <div className=\"modal-content camera-modal\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title text-white\" id=\"modal-label\">Webcam Terrain Generator</h5>\r\n              <button type=\"button\" className=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={()=>{setWebcamState(false)}}></button>\r\n            </div>\r\n            <div className=\"modal-body p-0\">\r\n              {webcamEnabled && <Webcam className=\"w-100\" ref={webCamRef} screenshotFormat=\"image/jpeg\" audio={false}/>}\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button className=\"btn btn-outline-light\" data-bs-dismiss=\"modal\" onClick={(e) => {fileReaderTerrain(grid, readWebcam()).then(walls => generateMaze(() => walls)).catch((err) => {console.log(err)}); setWebcamState(false)}}>Capture Image</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tutorial Popup Window */}\r\n      <div className=\"modal fade\" id=\"tutorial\" tabIndex=\"-1\" aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\r\n        <div className=\"modal-dialog modal-dialog-centered modal-lg\">\r\n          <div className=\"modal-content camera-modal\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"col-12 modal-title text-white\" id=\"modal-label\"><b>Tutorial - {\r\n                (tutorialPage === 1) ? 'Graph Algorithms'\r\n                : (tutorialPage === 2) ? 'Weighted/Unweighted'\r\n                : (tutorialPage === 3) ? 'Mazes/Terrain'\r\n                : 'Options'\r\n              }</b></h5>\r\n            </div>\r\n            <div className=\"modal-body p-0\">{\r\n              (tutorialPage === 1) ? <p>Pathfinding is closely related to the shortest path problem, within graph theory, which examines how to identify the path that best meets some criteria (shortest, cheapest, fastest, etc) between two points in a large network. This site is a tool to visualize these different graph pathfinding algorithms to better understand them.</p>\r\n              : (tutorialPage === 2) ? <p>All of the algorithms on this application are adapted for a 2D grid, movement through a node has a \"cost\" of 1. Different weights can be added by utilizing the Wall Weight Slider under the options menu. Weighted algorithms will take into consideration of these different weights on the grid whereas unweighted algorithms will ignore them entirely.</p>\r\n              : (tutorialPage === 3) ? <p>You can generate a maze using the algorithms within the maze dropdown. Weighted mazes are referred to as terrains. These can be created via image upload, webcam picture, or created within the application.</p>\r\n              : <p>The option menu allows the user to adapt the grid to their liking. This includes features such as setting wall weights, adjusting the grid size, and changing the animation speed.</p>\r\n            }{\r\n              (tutorialPage === 1) ? <img src={tutorialGif1} alt=\"loading...\" />\r\n              : (tutorialPage === 2) ? <img src={tutorialGif2} alt=\"loading...\" />\r\n              : (tutorialPage === 3) ? <img src={tutorialGif3} alt=\"loading...\" />\r\n              : <img src={tutorialGif4  } alt=\"loading...\" />\r\n            }</div>\r\n            <div className=\"modal-footer\">\r\n              {(tutorialPage === 1) ? <button className=\"btn btn-outline-light\" id=\"skip-button\" data-bs-dismiss=\"modal\">Skip</button> : ''}\r\n              {(tutorialPage > 1) ? <button className=\"btn btn-outline-light\" id=\"skip-button\" onClick={()=>setTutorialPage(x=>x-1)}>Previous</button> : ''}\r\n              {(tutorialPage<4) ? <button className=\"btn btn-outline-light\" id=\"skip-button\" onClick={()=>setTutorialPage(x=>x+1)}>Next</button> : ''}\r\n              {(tutorialPage === 4) ? <button className=\"btn btn-outline-light\" id=\"skip-button\" data-bs-dismiss=\"modal\">Finish</button> : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n  \r\n}","import {Switch, Route, HashRouter as Router} from \"react-router-dom\";\r\nimport {LandingPage} from \"./pages/LandingPage.js\";\r\nimport {SortingPage} from \"./pages/SortingPage.js\";\r\nimport {GraphPage} from \"./pages/GraphPage.js\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={LandingPage}/>\r\n        <Route path=\"/sorting\" component={SortingPage}/>\r\n        <Route path=\"/graph\" component={GraphPage}/>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}